name: Build

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - ".scripts/**"
      - .gitignore
      - CODE_OF_CONDUCT.md
      - LICENSE
      - README.md

  workflow_call:
    inputs:
      build-artifacts:
        type: boolean
        required: true
        default: false

env:
  ANGULAR_APP_LOCATION: angular_app

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install Node & cache npm packages
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: src/Web/ClientApp/package-lock.json

      - name: Install .NET
        uses: actions/setup-dotnet@v4

      - name: Restore solution
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Test solution
        run: dotnet test --no-build --configuration Release --filter "FullyQualifiedName!~AcceptanceTests"

      - name: Add config file
        run: 'echo "$ANGULAR_ENV" | base64 -d > src/Web/ClientApp/src/environments/environment.ts'
        shell: bash
        env:
          ANGULAR_ENV: ${{secrets.ANGULAR_ENV}}
      - name: Add prod config file
        run: 'echo "$ANGULAR_ENV" | base64 -d > src/Web/ClientApp/src/environments/environment.prod.ts'
        shell: bash
        env:
          ANGULAR_ENV: ${{secrets.ANGULAR_ENV}}
      - name: Add prod config file
        run: cat src/Web/ClientApp/src/environments/environment.prod.ts

      - name: Build Angular app
        run: |
          npm install
          npm run build -- --configuration production
        working-directory: ./src/Web/ClientApp/

      - name: Upload Angular app artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ANGULAR_APP_LOCATION }}
          path: ./src/Web/ClientApp/dist/
          if-no-files-found: error

      - name: dotnet publish
        run: dotnet publish ./src/Web -c Release -o ./myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ./myapp

      - name: Create EF Core migrations bundle - Install tool-manifest
        if: ${{ inputs.build-artifacts == true }}
        run: |
          dotnet new tool-manifest
        env:
          SkipNSwag: True

      - name: Create EF Core migrations bundle - Install dotnet-ef
        if: ${{ inputs.build-artifacts == true }}
        run: |
          dotnet tool install dotnet-ef --version 8.0.1
        env:
          SkipNSwag: True

      - name: Create EF Core migrations bundle - bundle migrations
        if: ${{ inputs.build-artifacts == true }}
        run: |
          dotnet ef migrations bundle --configuration Release -p ./src/Infrastructure/ -s ./src/Web/ -o efbundle.exe
        env:
          SkipNSwag: True

      - name: Create EF Core migrations bundle - zip migrations bundle
        if: ${{ inputs.build-artifacts == true }}
        run: |
          zip -r ./efbundle.zip efbundle.exe
        env:
          SkipNSwag: True

      - name: Upload EF Core migrations bundle artifact (efbundle)
        if: ${{ inputs.build-artifacts == true }}
        uses: actions/upload-artifact@v4
        with:
          name: efbundle
          path: ./efbundle.zip
          if-no-files-found: error
