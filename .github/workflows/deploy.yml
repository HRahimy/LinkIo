name: Deploy

on:
  workflow_call:
    inputs:
      environmentName:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  APP_LOCATION: angular_app
  OUTPUT_LOCATION: dist
  AZURE_WEBAPP_NAME: linkioback
  AZURE_WEBAPP_PACKAGE_PATH: "."
  DOTNET_VERSION: "8"

jobs:
  # build_angular:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       name: Checkout code
  #     - name: Install Node & cache npm packages
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20.x"
  #         cache: "npm"
  #         cache-dependency-path: src/Web/ClientApp/package-lock.json
  #     - name: Add config file
  #       run: 'echo "$ANGULAR_ENV" | base64 -d > src/Web/ClientApp/src/environments/environment.ts'
  #       shell: bash
  #       env:
  #         ANGULAR_ENV: ${{secrets.ANGULAR_ENV}}
  #     - name: Add prod config file
  #       run: 'echo "$ANGULAR_ENV" | base64 -d > src/Web/ClientApp/src/environments/environment.prod.ts'
  #       shell: bash
  #       env:
  #         ANGULAR_ENV: ${{secrets.ANGULAR_ENV}}

  #     - name: Build Angular app
  #       run: |
  #         npm install
  #         npm run build
  #       working-directory: ./src/Web/ClientApp/

  #     - name: Upload Angular app artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ env.APP_LOCATION }}
  #         path: ./src/Web/ClientApp/dist/
  #         if-no-files-found: error

  # deploy_angular:
  #   if: github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   name: Build and Deploy
  #   needs: [build_angular]
  #   steps:
  #     - name: Download Angular app artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ${{ env.APP_LOCATION }}
  #         path: ${{ env.APP_LOCATION }}
  #     - name: Build And Deploy
  #       uses: Azure/static-web-apps-deploy@1a947af9992250f3bc2e68ad0754c0b0c11566c9
  #       env:
  #         ANGULAR_ENV: ${{secrets.ANGULAR_ENV}}
  #       with:
  #         azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         action: "upload"
  #         app_location: ${{ env.APP_LOCATION }}
  #         output_location: ${{ env.OUTPUT_LOCATION }}
  #         skip_app_build: true

  build_dotnet:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish ./src/Web -c Release -o ./myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ./myapp

  deploy_dotnet:
    runs-on: ubuntu-latest
    needs: [build_dotnet]

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  initialize_database:
    runs-on: ubuntu-latest
    # needs: [deploy_dotnet]
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: efbundle
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Set up migration
        run: |
          unzip -o ./efbundle.zip
          echo '{ "ConnectionStrings": { "DefaultConnection": "" } }' > appsettings.json
          ls
      - name: Initialize database
        run: './efbundle.exe --connection "$SQL_CONNECTION_STRING" --verbose'
        env:
          SQL_CONNECTION_STRING: ${{secrets.SQL_CONNECTION_STRING}}
      - name: Azure logout
        run: az logout
